<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
       default-autowire="byName">


    <context:component-scan base-package="com.rpc"/>
    <!--<context:property-placeholder location="classpath:log4j.properties"/>-->
    <!--<context:component-scan base-package="Weibo.HotClassification">-->
    <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    <!--</context:component-scan>-->
    <context:annotation-config/>

    <!--若要使用@Autowired注解,必须使用此bean-->
    <!--@Autowired可用于成员变量、方法、构造函数,默认按照类型装配,若欲使用名称装配,则需与@Qualifier一起使用-->
    <!--<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>-->


    <!-- 该Bean后处理器将会为容器中Bean生成AOP代理 -->
    <!--<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/>-->

    <!-- 启动@AspectJ支持 -->
    <!--<bean id="point" class="Weibo.HotClassification.Task.PointCut">-->
    <!--<property name="s" value=",这是参数"/>-->
    <!--</bean>-->
    <!--<bean id="asj" class="Weibo.HotClassification.Task.ASJTest"/>-->

    <!--<aop:aspectj-autoproxy/>-->

    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
    <!--<aop:config>-->
    <!--<aop:pointcut id="pointcut" expression="execution(* Weibo.HotClassification.Task.PointCut.*(..))"/>-->
    <!--<aop:aspect id="aspect" ref="asj">-->
    <!--<aop:before method="before" pointcut-ref="pointcut"/>-->
    <!--<aop:around method="Log" pointcut-ref="pointcut"/>-->
    <!--<aop:after method="after" pointcut-ref="pointcut" />-->
    <!--</aop:aspect>-->
    <!--</aop:config>-->

    <import resource="spring/*.xml"/>

    <!-- 配置服务注册组件 -->
    <bean id="serviceRegistry" class="com.rpc.Core.ServiceRegistry">
        <constructor-arg name="registryAddress" value="${registry.address}"/>
    </bean>

    <!-- 配置 RPC 服务器 -->
    <bean id="rpcServer" class="com.rpc.Core.RpcServer">
        <constructor-arg name="serverAddress" value="${server.address}"/>
        <constructor-arg name="serviceRegistry" ref="serviceRegistry"/>
    </bean>

    <!-- 配置服务发现组件 -->
    <bean id="serviceDiscovery" class="com.rpc.Core.ServiceDiscovery">
        <constructor-arg name="registryAddress" value="${registry.address}"/>
    </bean>

    <!-- 配置 RPC 代理 -->
    <bean id="rpcProxy" class="com.rpc.Proxy.RpcProxy">
        <constructor-arg name="serviceDiscovery" ref="serviceDiscovery"/>
    </bean>

    <!-- 开启这个配置，spring才能识别@Scheduled注解 -->
    <!--<task:annotation-driven scheduler="hotClasScheduler" mode="proxy"/>-->
    <!--<task:scheduler id="hotClasScheduler" pool-size="10"/>-->
    <task:annotation-driven/>
    <!--<tx:annotation-driven />-->

    <!--<cache:annotation-driven />-->

    <!--<bean class="org.slf4j.bridge.SLF4JBridgeHandler" init-method="removeHandlersForRootLogger"/>-->
    <!--<bean class="org.slf4j.bridge.SLF4JBridgeHandler" init-method="install"/>-->
</beans>
